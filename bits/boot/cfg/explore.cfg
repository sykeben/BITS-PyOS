#------------------------------------------------------------------------------
#
# Copyright (c) 2015, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------

menuentry "Platform information" {
  py 'import bits.platform ; bits.platform.dump()'
}

if [ $grub_platform = 'efi' ]; then source (python)/explore_efi.cfg; fi

menuentry "ACPI tables" {
  py 'import acpi ; acpi.create_explore_acpi_tables_cfg()'
  configfile (python)/explore_acpi_tables.cfg
}

menuentry "ACPI CPU methods" {
  py 'import acpi ; acpi.create_explore_acpi_cpu_methods_cfg()'
  configfile (python)/explore_acpi_cpu_methods.cfg
}

menuentry "ACPI PROCESSOR objects" {
  py 'import acpi ; acpi.display_cpu_info()'
}

menuentry "Decode all ACPI _CRS (Current Resource Settings) objects" {
  py 'import acpi ; acpi.display_resources("_CRS")'
}

menuentry "Decode all ACPI _CRS (Current Resource Settings) objects to log only" {
  py 'import acpi, bits, redirect'
  py 'with redirect.log(): print "\nDecoding all ACPI _CRS (Current Resource Settings) objects to log..."'
  py 'with redirect.logonly(): acpi.display_resources("_CRS")'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Decode all ACPI _PRS (Possible Resource Settings) objects" {
  py 'import acpi ; acpi.display_resources("_PRS")'
}

menuentry "Decode all ACPI _PRS (Possible Resource Settings) objects to log only" {
  py 'import acpi, bits, redirect'
  py 'with redirect.log(): print "\nDecoding all ACPI _PRS (Possible Resource Settings) objects to log..."'
  py 'with redirect.logonly(): acpi.display_resources("_PRS")'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Set requested ACPI processor power management features (OS emulation)" {
  configfile /boot/cfg/acpi_os.cfg
}

menuentry "Display processor topology" {
  py 'import topology ; topology.display()'
}

menuentry "Dump decoded SMBIOS structures" {
  py 'import smbios ; smbios.dump()'
}

menuentry "Dump raw and decoded SMBIOS structures" {
  py 'import smbios ; smbios.dump_raw()'
}

menuentry "Dump decoded SMBIOS structures to log only" {
  echo "Dumping decoded SMBIOSMP Table to log..."
  py 'import bits, redirect, smbios'
  py 'with redirect.logonly(): print "\n" ; smbios.dump() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Dump raw and decoded SMBIOS structures to log only" {
  echo "Dumping raw and decoded SMBIOSMP Table to log..."
  py 'import bits, redirect, smbios'
  py 'with redirect.logonly(): print "\n" ; smbios.dump_raw() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Dump decoded MP Table" {
  py 'import mptable'
  py 'mptable.dump()'
}

menuentry "Dump raw and decoded MP Table" {
  py 'import mptable'
  py 'mptable.dump_raw()'
}

menuentry "Dump decoded MP Table to log only" {
  echo "Dumping decode MP Table to log..."
  py 'import bits, mptable, redirect'
  py 'with redirect.logonly(): print "\n" ; mptable.dump() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Dump raw and decoded MP Table to log only" {
  echo "Dumping raw and decoded MP Table to log..."
  py 'import bits, mptable, redirect'
  py 'with redirect.logonly(): print "\n" ; mptable.dump_raw() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Dump decoded PCI Interrupt Routing Table" {
  py 'import bits.pirtable'
  py 'bits.pirtable.dump()'
}

menuentry "Dump raw and decoded PCI Interrupt Routing Table" {
  py 'import bits.pirtable'
  py 'bits.pirtable.dump_raw()'
}

menuentry "Dump decoded PCI Interrupt Routing Table to log only" {
  echo "Dumping decode PCI Interrupt Routing Table to log..."
  py 'import bits, bits.pirtable, redirect'
  py 'with redirect.logonly(): print "\n" ; bits.pirtable.dump() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "Dump raw and decoded PCI Interrupt Routing Table to log only" {
  echo "Dumping raw and decoded PCI Interrupt Routing Table to log..."
  py 'import bits, bits.pirtable, redirect'
  py 'with redirect.logonly(): print "\n" ; bits.pirtable.dump_raw() ; print "\n"'
  echo "Done."
  py 'from bits import pause ; pause.pause()'
}

menuentry "C-state exploration: set MWAIT hint and check latency" {
  configfile (python)/mwaitmenu.cfg
}

menuentry "Display variable MTRRs" {
  py 'import mtrr ; mtrr.variable_mtrrs()'
}

menuentry "Determine processor frequency" {
  py 'import bits ; bits.print_cpu_freq()'
  py 'from bits import pause ; pause.pause()'
}

menuentry "Display processor brand string obtained via CPUID instruction" {
  brandstring
  py 'from bits import pause ; pause.pause()'
}
